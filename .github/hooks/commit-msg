#!/bin/bash

# Commit message validation hook for Gopher
# Validates commit messages against conventional commit format

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Get the commit message
commit_msg=$(cat "$1")

# Function to print colored output
print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

# Function to validate commit message format
validate_commit_message() {
    local msg="$1"
    
    # Check if message is empty
    if [ -z "$msg" ]; then
        print_error "Commit message cannot be empty"
        return 1
    fi
    
    # Check if message is too short
    if [ ${#msg} -lt 10 ]; then
        print_warning "Commit message is very short. Consider adding more detail."
    fi
    
    # Check if message starts with conventional commit type
    if [[ "$msg" =~ ^(feat|fix|docs|style|refactor|perf|test|chore|ci|build|revert)(\(.+\))?: ]]; then
        print_success "Commit message follows conventional commit format"
        return 0
    fi
    
    # Check for common patterns that might be acceptable
    if [[ "$msg" =~ ^(Merge|Revert|WIP|wip) ]]; then
        print_warning "Commit message uses special prefix (Merge/Revert/WIP) - skipping validation"
        return 0
    fi
    
    # If none of the above, show error with suggestions
    print_error "Commit message does not follow conventional commit format"
    echo ""
    echo "Expected format: <type>[optional scope]: <description>"
    echo ""
    echo "Types: feat, fix, docs, style, refactor, perf, test, chore, ci, build, revert"
    echo "Scopes: alias, version, install, config, cli, api, docs, tests, ci, docker, security"
    echo ""
    echo "Examples:"
    echo "  feat(alias): add support for alias groups"
    echo "  fix(version): resolve version detection on Windows"
    echo "  docs: update installation instructions"
    echo "  chore: update dependencies"
    echo ""
    echo "For more information, see: .github/COMMIT_CONVENTION.md"
    echo ""
    echo "Current message: \"$msg\""
    
    return 1
}

# Function to check for common issues
check_common_issues() {
    local msg="$1"
    
    # Check for trailing period
    if [[ "$msg" =~ \.$ ]]; then
        print_warning "Consider removing trailing period from commit message"
    fi
    
    # Check for very long first line
    local first_line=$(echo "$msg" | head -n1)
    if [ ${#first_line} -gt 72 ]; then
        print_warning "First line is longer than 72 characters (${#first_line} chars)"
    fi
    
    # Check for capitalization
    if [[ "$msg" =~ ^[A-Z] ]]; then
        print_warning "Consider using lowercase for the first letter of the description"
    fi
    
    # Check for imperative mood (basic check)
    if [[ "$msg" =~ (added|fixed|updated|changed|removed|created) ]]; then
        print_warning "Consider using imperative mood (add, fix, update, change, remove, create)"
    fi
}

# Main validation
main() {
    echo "üîç Validating commit message..."
    
    if validate_commit_message "$commit_msg"; then
        check_common_issues "$commit_msg"
        print_success "Commit message validation passed!"
        exit 0
    else
        print_error "Commit message validation failed!"
        echo ""
        echo "To bypass this check (not recommended), use:"
        echo "  git commit --no-verify -m \"your message\""
        exit 1
    fi
}

# Run validation
main
