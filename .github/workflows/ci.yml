name: CI

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'
      - '.github/FUNDING.yml'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'

# Cancel previous runs if new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Run go vet
        run: go vet ./...

      - name: Run gofmt
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run goimports
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          if [ "$(goimports -l . | wc -l)" -gt 0 ]; then
            echo "The following files have import issues:"
            goimports -l .
            exit 1
          fi

      - name: Run staticcheck
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./...

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=5m

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.html

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22', '1.23']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Build
        run: go build -v ./cmd/gopher

      - name: Test build
        run: |
          ./gopher version
          ./gopher help

  build-cross-platform:
    name: Build Cross-Platform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build for Linux AMD64
        run: GOOS=linux GOARCH=amd64 go build -o gopher-linux-amd64 ./cmd/gopher

      - name: Build for Linux ARM64
        run: GOOS=linux GOARCH=arm64 go build -o gopher-linux-arm64 ./cmd/gopher

      - name: Build for macOS AMD64
        run: GOOS=darwin GOARCH=amd64 go build -o gopher-darwin-amd64 ./cmd/gopher

      - name: Build for macOS ARM64
        run: GOOS=darwin GOARCH=arm64 go build -o gopher-darwin-arm64 ./cmd/gopher

      - name: Build for Windows AMD64
        run: GOOS=windows GOARCH=amd64 go build -o gopher-windows-amd64.exe ./cmd/gopher

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: gopher-binaries
          path: |
            gopher-linux-amd64
            gopher-linux-arm64
            gopher-darwin-amd64
            gopher-darwin-arm64
            gopher-windows-amd64.exe
  
  # Note: Docker builds are handled in docker.yml workflow
