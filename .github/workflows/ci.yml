name: CI

on:
  push:
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'
      - '.github/FUNDING.yml'
  pull_request:
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'

# Cancel previous runs if new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.9'

      - name: Run go vet
        run: go vet ./...

      - name: Run gofmt
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run goimports
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          if [ "$(goimports -l . | wc -l)" -gt 0 ]; then
            echo "The following files have import issues:"
            goimports -l .
            exit 1
          fi

      - name: Run staticcheck
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./...

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m

  test:
    name: Test with Coverage
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.9'

      - name: Run tests with coverage
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Generate coverage report (HTML)
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Show coverage summary
        run: |
          echo "## ðŸ“Š Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          go tool cover -func=coverage.out >> $GITHUB_STEP_SUMMARY
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}')
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total Coverage: $COVERAGE**" >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload coverage HTML report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.sha }}
          path: coverage.html
          retention-days: 30

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: coverage
          message: |
            ## ðŸ“Š Test Coverage Report
            
            Coverage report generated! Download the HTML report from the artifacts section.
            
            <details>
            <summary>Click to see coverage details</summary>
            
            ```
            $(go tool cover -func=coverage.out | tail -20)
            ```
            </details>

  build:
    name: Build (Go ${{ matrix.go-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.22', '1.23', '1.24']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Build with version info
        run: |
          VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev")
          COMMIT=$(git rev-parse --short HEAD 2>/dev/null || echo "none")
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          go build -ldflags "-X main.appVersion=$VERSION -X main.appCommit=$COMMIT -X main.appDate=$BUILD_DATE -X main.appBuiltBy=ci -s -w" \
            -v -o gopher ./cmd/gopher

      - name: Verify build works
        run: |
          ./gopher version
          ./gopher help
          
      - name: Report build success
        run: |
          echo "## âœ… Build Success (Go ${{ matrix.go-version }})" >> $GITHUB_STEP_SUMMARY
          echo "Binary built and verified successfully" >> $GITHUB_STEP_SUMMARY

  build-cross-platform:
    name: Build Cross-Platform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.9'

      - name: Set build variables
        id: vars
        run: |
          echo "VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo 'dev')" >> $GITHUB_OUTPUT
          echo "COMMIT=$(git rev-parse --short HEAD 2>/dev/null || echo 'none')" >> $GITHUB_OUTPUT
          echo "BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_OUTPUT

      - name: Build for Linux AMD64
        run: |
          GOOS=linux GOARCH=amd64 go build -ldflags "-X main.appVersion=${{ steps.vars.outputs.VERSION }} -X main.appCommit=${{ steps.vars.outputs.COMMIT }} -X main.appDate=${{ steps.vars.outputs.BUILD_DATE }} -X main.appBuiltBy=ci -s -w" \
            -o gopher-linux-amd64 ./cmd/gopher

      - name: Build for Linux ARM64
        run: |
          GOOS=linux GOARCH=arm64 go build -ldflags "-X main.appVersion=${{ steps.vars.outputs.VERSION }} -X main.appCommit=${{ steps.vars.outputs.COMMIT }} -X main.appDate=${{ steps.vars.outputs.BUILD_DATE }} -X main.appBuiltBy=ci -s -w" \
            -o gopher-linux-arm64 ./cmd/gopher

      - name: Build for macOS AMD64
        run: |
          GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.appVersion=${{ steps.vars.outputs.VERSION }} -X main.appCommit=${{ steps.vars.outputs.COMMIT }} -X main.appDate=${{ steps.vars.outputs.BUILD_DATE }} -X main.appBuiltBy=ci -s -w" \
            -o gopher-darwin-amd64 ./cmd/gopher

      - name: Build for macOS ARM64
        run: |
          GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.appVersion=${{ steps.vars.outputs.VERSION }} -X main.appCommit=${{ steps.vars.outputs.COMMIT }} -X main.appDate=${{ steps.vars.outputs.BUILD_DATE }} -X main.appBuiltBy=ci -s -w" \
            -o gopher-darwin-arm64 ./cmd/gopher

      - name: Build for Windows AMD64
        run: |
          GOOS=windows GOARCH=amd64 go build -ldflags "-X main.appVersion=${{ steps.vars.outputs.VERSION }} -X main.appCommit=${{ steps.vars.outputs.COMMIT }} -X main.appDate=${{ steps.vars.outputs.BUILD_DATE }} -X main.appBuiltBy=ci -s -w" \
            -o gopher-windows-amd64.exe ./cmd/gopher

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gopher-binaries
          path: |
            gopher-linux-amd64
            gopher-linux-arm64
            gopher-darwin-amd64
            gopher-darwin-arm64
            gopher-windows-amd64.exe
  
  # Note: Docker builds are handled in docker.yml workflow
