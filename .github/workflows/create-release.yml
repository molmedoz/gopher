name: Create Release

# Manual workflow with validation before tagging
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0 or v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release?'
        required: false
        type: boolean
        default: false
      draft:
        description: 'Create as draft?'
        required: false
        type: boolean
        default: false

# Permissions needed for creating releases and tags
permissions:
  contents: write
  pull-requests: read

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.normalize.outputs.version }}
      tag: ${{ steps.normalize.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for changelog

      - name: Normalize version
        id: normalize
        run: |
          VERSION="${{ github.event.inputs.version }}"
          # Remove 'v' prefix if present
          VERSION_NUM="${VERSION#v}"
          # Add 'v' prefix for tag
          TAG="v${VERSION_NUM}"
          
          echo "version=${VERSION_NUM}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          
          echo "📦 Version: ${VERSION_NUM}"
          echo "🏷️  Tag: ${TAG}"

      - name: Check if tag already exists
        run: |
          TAG="${{ steps.normalize.outputs.tag }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "❌ Error: Tag $TAG already exists!"
            echo "Please use a different version number or delete the existing tag."
            exit 1
          fi
          echo "✅ Tag $TAG is available"

      - name: Verify version in CHANGELOG
        run: |
          VERSION="${{ steps.normalize.outputs.version }}"
          if ! grep -q "\[$VERSION\]" CHANGELOG.md && ! grep -q "\[v$VERSION\]" CHANGELOG.md; then
            echo "⚠️  Warning: Version $VERSION not found in CHANGELOG.md"
            echo "Please update CHANGELOG.md before releasing"
            # Don't fail - just warn
          else
            echo "✅ Version found in CHANGELOG.md"
          fi

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.9'

      - name: Run all tests
        run: |
          echo "🧪 Running all tests with race detection..."
          go test -race -covermode=atomic ./...

      - name: Run linter
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m

      - name: Build for all platforms
        run: |
          echo "🔨 Building for all platforms..."
          make build-all

      - name: Validation summary
        run: |
          echo "## ✅ Release Validation Passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Version: ${{ steps.normalize.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tag: ${{ steps.normalize.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- Draft: ${{ github.event.inputs.draft }}" >> $GITHUB_STEP_SUMMARY
          echo "- Pre-release: ${{ github.event.inputs.prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tests: ✅ Passed" >> $GITHUB_STEP_SUMMARY
          echo "- Linter: ✅ Passed" >> $GITHUB_STEP_SUMMARY
          echo "- Build: ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Ready to create release!" >> $GITHUB_STEP_SUMMARY

  create-tag:
    name: Create Tag
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create and push tag
        run: |
          TAG="${{ needs.validate.outputs.tag }}"
          echo "🏷️  Creating tag: $TAG"
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"
          echo "✅ Tag $TAG created and pushed"

      - name: Tag created summary
        run: |
          echo "## 🏷️  Tag Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Tag \`${{ needs.validate.outputs.tag }}\` has been created and pushed." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The release workflow will now be triggered automatically." >> $GITHUB_STEP_SUMMARY

  # Validate GoReleaser config before releasing
  validate-config:
    name: Validate Release Config
    runs-on: ubuntu-latest
    needs: [validate, create-tag]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.validate.outputs.tag }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.9'

      - name: Validate GoReleaser configuration
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: check

      - name: Test GoReleaser build (dry-run)
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: build --snapshot --clean --single-target
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Config validation summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## ✅ Release Configuration Validated
          
          - GoReleaser config: Valid
          - Build test: Successful
          - Ready to release: Yes
          
          Proceeding with parallel release jobs...
          EOF

  # Release 1: GitHub Release (binaries, archives, checksums)
  release-github:
    name: Release → GitHub
    runs-on: ubuntu-latest
    needs: [validate, create-tag, validate-config]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.validate.outputs.tag }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.9'

      - name: Prepare arguments
        id: args
        run: |
          args="release --clean --skip=brews,chocolateys,scoops"
          [ "${{ github.event.inputs.draft }}" = "true" ] && args="$args --draft"
          [ "${{ github.event.inputs.prerelease }}" = "true" ] && args="$args --prerelease"
          echo "args=$args" >> $GITHUB_OUTPUT

      - name: Release to GitHub
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: ${{ steps.args.outputs.args }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        if: success()
        run: |
          echo "✅ **GitHub Release**: Published binaries and archives" >> $GITHUB_STEP_SUMMARY
          echo "📦 View: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.tag }}" >> $GITHUB_STEP_SUMMARY

  # Release 2: Homebrew (macOS/Linux)
  release-homebrew:
    name: Release → Homebrew
    runs-on: ubuntu-latest
    needs: [validate, create-tag, validate-config, release-github]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.validate.outputs.tag }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.9'

      - name: Publish to Homebrew
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --skip=validate,archives,source,chocolateys,nfpms,scoops
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HOMEBREW_TAP_GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_GITHUB_TOKEN }}
        continue-on-error: true

      - name: Summary
        if: success()
        run: |
          echo "✅ **Homebrew**: Formula updated in molmedoz/homebrew-tap" >> $GITHUB_STEP_SUMMARY
          echo "📦 Install: \`brew tap molmedoz/tap && brew install gopher\`" >> $GITHUB_STEP_SUMMARY

      - name: Failure notice
        if: failure()
        run: |
          echo "⚠️ **Homebrew**: Publishing failed (non-critical)" >> $GITHUB_STEP_SUMMARY

  # Release 3: Chocolatey (Windows)
  release-chocolatey:
    name: Release → Chocolatey
    runs-on: ubuntu-latest
    needs: [validate, create-tag, validate-config, release-github]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.validate.outputs.tag }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.9'

      - name: Publish to Chocolatey
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --skip=validate,archives,source,brews,nfpms,scoops
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CHOCOLATEY_API_KEY: ${{ secrets.CHOCOLATEY_API_KEY }}
        continue-on-error: true

      - name: Summary
        if: success()
        run: |
          echo "✅ **Chocolatey**: Package published to chocolatey.org" >> $GITHUB_STEP_SUMMARY
          echo "📦 Install: \`choco install gopher\`" >> $GITHUB_STEP_SUMMARY

      - name: Failure notice
        if: failure()
        run: |
          echo "⚠️ **Chocolatey**: Publishing failed (non-critical)" >> $GITHUB_STEP_SUMMARY

  # Release 4: Scoop (Windows)
  release-scoop:
    name: Release → Scoop
    runs-on: ubuntu-latest
    needs: [validate, create-tag, validate-config, release-github]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.validate.outputs.tag }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.9'

      - name: Publish to Scoop
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --skip=validate,archives,source,brews,chocolateys,nfpms
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HOMEBREW_TAP_GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_GITHUB_TOKEN }}
        continue-on-error: true

      - name: Summary
        if: success()
        run: |
          echo "✅ **Scoop**: Manifest updated in molmedoz/scoop-bucket" >> $GITHUB_STEP_SUMMARY
          echo "📦 Install: \`scoop bucket add molmedoz ...; scoop install gopher\`" >> $GITHUB_STEP_SUMMARY

      - name: Failure notice
        if: failure()
        run: |
          echo "ℹ️ **Scoop**: Bucket doesn't exist yet (skip_upload: auto)" >> $GITHUB_STEP_SUMMARY

  # Final summary job
  release-summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [validate, create-tag, release-github, release-homebrew, release-chocolatey, release-scoop]
    if: always()
    steps:
      - name: Generate summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 🎉 Release ${{ needs.validate.outputs.tag }} Complete
          
          ### Status:
          - GitHub: ${{ needs.release-github.result == 'success' && '✅' || '❌' }}
          - Homebrew: ${{ needs.release-homebrew.result == 'success' && '✅' || needs.release-homebrew.result == 'failure' && '⚠️' || '⏭️' }}
          - Chocolatey: ${{ needs.release-chocolatey.result == 'success' && '✅' || needs.release-chocolatey.result == 'failure' && '⚠️' || '⏭️' }}
          - Scoop: ${{ needs.release-scoop.result == 'success' && '✅' || needs.release-scoop.result == 'failure' && 'ℹ️' || '⏭️' }}
          
          ### Links:
          - [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.tag }})
          - [Homebrew Tap](https://github.com/molmedoz/homebrew-tap)
          
          ### Installation:
          \`\`\`bash
          # Homebrew (macOS/Linux)
          brew tap molmedoz/tap && brew install gopher
          
          # Chocolatey (Windows)
          choco install gopher
          
          # Scoop (Windows)
          scoop bucket add molmedoz https://github.com/molmedoz/scoop-bucket
          scoop install gopher
          
          # Direct download
          https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.tag }}
          \`\`\`
          EOF
      
      - name: Check critical failures
        if: needs.release-github.result != 'success'
        run: |
          echo "❌ GitHub release failed - this is a critical error"
          exit 1

