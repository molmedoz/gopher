name: Create Release

# Manual workflow with validation before tagging
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0 or v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release?'
        required: false
        type: boolean
        default: false
      draft:
        description: 'Create as draft?'
        required: false
        type: boolean
        default: false

# Permissions needed for creating releases and tags
permissions:
  contents: write
  pull-requests: read

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.normalize.outputs.version }}
      tag: ${{ steps.normalize.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for changelog

      - name: Normalize version
        id: normalize
        run: |
          VERSION="${{ github.event.inputs.version }}"
          # Remove 'v' prefix if present
          VERSION_NUM="${VERSION#v}"
          # Add 'v' prefix for tag
          TAG="v${VERSION_NUM}"
          
          echo "version=${VERSION_NUM}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          
          echo "📦 Version: ${VERSION_NUM}"
          echo "🏷️  Tag: ${TAG}"

      - name: Check if tag already exists
        run: |
          TAG="${{ steps.normalize.outputs.tag }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "❌ Error: Tag $TAG already exists!"
            echo "Please use a different version number or delete the existing tag."
            exit 1
          fi
          echo "✅ Tag $TAG is available"

      - name: Verify version in CHANGELOG
        run: |
          VERSION="${{ steps.normalize.outputs.version }}"
          if ! grep -q "\[$VERSION\]" CHANGELOG.md && ! grep -q "\[v$VERSION\]" CHANGELOG.md; then
            echo "⚠️  Warning: Version $VERSION not found in CHANGELOG.md"
            echo "Please update CHANGELOG.md before releasing"
            # Don't fail - just warn
          else
            echo "✅ Version found in CHANGELOG.md"
          fi

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.9'

      - name: Run all tests
        run: |
          echo "🧪 Running all tests with race detection..."
          go test -race -covermode=atomic ./...

      - name: Run linter
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m

      - name: Build for all platforms
        run: |
          echo "🔨 Building for all platforms..."
          make build-all

      - name: Validation summary
        run: |
          echo "## ✅ Release Validation Passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Version: ${{ steps.normalize.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tag: ${{ steps.normalize.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- Draft: ${{ github.event.inputs.draft }}" >> $GITHUB_STEP_SUMMARY
          echo "- Pre-release: ${{ github.event.inputs.prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tests: ✅ Passed" >> $GITHUB_STEP_SUMMARY
          echo "- Linter: ✅ Passed" >> $GITHUB_STEP_SUMMARY
          echo "- Build: ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Ready to create release!" >> $GITHUB_STEP_SUMMARY

  create-tag:
    name: Create Tag
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create and push tag
        run: |
          TAG="${{ needs.validate.outputs.tag }}"
          echo "🏷️  Creating tag: $TAG"
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"
          echo "✅ Tag $TAG created and pushed"

      - name: Tag created summary
        run: |
          echo "## 🏷️  Tag Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Tag \`${{ needs.validate.outputs.tag }}\` has been created and pushed." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The release workflow will now be triggered automatically." >> $GITHUB_STEP_SUMMARY

  release:
    name: Create Release (Windows/Chocolatey)
    runs-on: windows-latest  # Windows for Chocolatey support
    needs: [validate, create-tag]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.validate.outputs.tag }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.9'

      - name: Verify Chocolatey is available
        run: |
          Write-Host "Verifying packaging tools..."
          
          # Verify Chocolatey is installed (pre-installed on Windows runners)
          choco --version
          
          Write-Host "SUCCESS: Chocolatey available for package building"
        shell: powershell

      - name: Prepare GoReleaser arguments
        id: goreleaser_args
        run: |
          $args = "release --clean --skip=homebrew"
          
          # Add draft flag if requested
          if ("${{ github.event.inputs.draft }}" -eq "true") {
            $args += " --draft"
            Write-Host "Creating as draft release"
          }
          
          # Note: prerelease is auto-detected by GoReleaser based on semver
          # but we can override it if explicitly requested
          if ("${{ github.event.inputs.prerelease }}" -eq "true") {
            $args += " --prerelease"
            Write-Host "WARNING: Marking as pre-release"
          }
          
          Write-Host "GoReleaser arguments: $args"
          Write-Host "Note: Homebrew publishing will be handled by separate Linux job"
          "args=$args" | Add-Content -Path $env:GITHUB_OUTPUT -Encoding utf8
        shell: powershell

      - name: Run GoReleaser
        id: goreleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: ${{ steps.goreleaser_args.outputs.args }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CHOCOLATEY_API_KEY: ${{ secrets.CHOCOLATEY_API_KEY }}
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_STORE_CREDENTIALS }}
        continue-on-error: true

      - name: Check GoReleaser result
        if: steps.goreleaser.outcome == 'failure'
        run: |
          Write-Host "ERROR: GoReleaser failed! Cleaning up tag..."
          $TAG = "${{ needs.validate.outputs.tag }}"
          
          # Configure Git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Delete the tag locally and remotely
          Write-Host "Deleting local tag..."
          git tag -d $TAG
          if ($LASTEXITCODE -ne 0) {
            Write-Host "WARNING: Failed to delete local tag"
          }
          
          Write-Host "Deleting remote tag..."
          git push origin ":refs/tags/$TAG"
          if ($LASTEXITCODE -ne 0) {
            Write-Host "WARNING: Failed to delete remote tag"
          }
          
          $summary = "## Release Failed`n`n"
          $summary += "GoReleaser failed. Tag ``$TAG`` has been deleted.`n`n"
          $summary += "Please check the logs above, fix the issues, and try again."
          $summary | Add-Content -Path $env:GITHUB_STEP_SUMMARY -Encoding utf8
          
          exit 1
        shell: powershell

      - name: Release summary
        if: steps.goreleaser.outcome == 'success'
        run: |
          $summary = "## ✅ Release Published (Windows/Chocolatey)`n`n"
          $summary += "Version ``${{ needs.validate.outputs.tag }}`` has been released!`n`n"
          $summary += "- Binaries: ✅ Published`n"
          $summary += "- Chocolatey: ✅ Published`n"
          $summary += "- Homebrew: ⏳ Publishing in separate job`n`n"
          $summary += "View release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.tag }}"
          $summary | Add-Content -Path $env:GITHUB_STEP_SUMMARY -Encoding utf8
        shell: powershell

  homebrew:
    name: Publish to Homebrew Tap
    runs-on: ubuntu-latest  # Linux for Homebrew publishing
    needs: [validate, create-tag, release]
    if: needs.release.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.validate.outputs.tag }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.9'

      - name: Publish to Homebrew Tap
        id: homebrew
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --skip=validate,build,announce,chocolateys,nfpms,source,checksum,archives
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HOMEBREW_TAP_GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_GITHUB_TOKEN }}
        continue-on-error: true

      - name: Check Homebrew result
        if: steps.homebrew.outcome == 'failure'
        run: |
          echo "## ⚠️ Homebrew Publishing Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The main release was successful, but Homebrew formula update failed." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Action required:** Update the Homebrew formula manually:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "cd /tmp" >> $GITHUB_STEP_SUMMARY
          echo "git clone https://github.com/molmedoz/homebrew-tap.git" >> $GITHUB_STEP_SUMMARY
          echo "cd homebrew-tap" >> $GITHUB_STEP_SUMMARY
          echo "# Update Formula/gopher.rb with new version and SHA256" >> $GITHUB_STEP_SUMMARY
          echo "git commit -am 'Update gopher to ${{ needs.validate.outputs.tag }}'" >> $GITHUB_STEP_SUMMARY
          echo "git push" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          # Don't fail the workflow - main release succeeded
          exit 0

      - name: Homebrew summary
        if: steps.homebrew.outcome == 'success'
        run: |
          echo "## ✅ Homebrew Formula Updated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Homebrew formula published to molmedoz/homebrew-tap" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Users can install with:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "brew tap molmedoz/tap" >> $GITHUB_STEP_SUMMARY
          echo "brew install gopher" >> $GITHUB_STEP_SUMMARY
          echo "# Or upgrade: brew upgrade gopher" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

